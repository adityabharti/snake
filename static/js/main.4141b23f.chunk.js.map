{"version":3,"sources":["components/square.jsx","components/consts.jsx","components/util.jsx","components/board.jsx","App.js","serviceWorker.js","index.js"],"names":["Square","squareClasses","this","props","value","className","Component","cst","ROWS","COLS","getRandomRowCol","Math","floor","random","INSECT","SNAKE_LENGTH","MOVE_TIME_INTERVAL","LEFT","UP","RIGHT","DOWN","SNAKES_TAIL_X","SNAKES_TAIL_Y","Board","state","grid","insectRow","insectCol","snakeCoordinates","prev_direction","direction","snake_length","highScore","maxSpeed","changeDirection","event","keyCode","setState","snakeCoords","row","col","i","length","x","y","randomRow","randomCol","snakeCo","griddy","shift","old_coord_x","old_coord_y","push","generateInsect","unshift","clearInterval","interval","newTimeInterval","setInterval","moveSnake","snakeLength","head_x","head_y","isSnakeHeadOnBody","alert","window","location","reload","temp_row","getGrid","document","addEventListener","removeEventListener","isInsectOnSnake","map","rowIdx","key","colIdx","App","Boolean","hostname","match","ReactDOM","render","Fragment","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4141b23f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./square.css\";\nclass Square extends Component {\n  render() {\n    let squareClasses = \"square \";\n    if (this.props.value === \"I\") squareClasses += \"insect \";\n    else if (this.props.value === \"S\") squareClasses += \"snake \";\n\n    return <div className={squareClasses}></div>;\n  }\n}\n\nexport default Square;\n\n// super();\n// var x = new Array(10).fill(\".\");\n\n// for (var i = 0; i < x.length; i++) {\n//   x[i] = new Array(10).fill(\".\");\n// }\n// for (var i = 0; i < x.length; i++) {\n//   for (var j = 0; j < x[i].length; j++) {\n//     console.log(x[i][j]);\n//   }\n//   console.log(\"\\n\");\n// }\n","export const cst = {\n  ROWS: 22,\n  COLS: 30,\n  INSECT: \"I\",\n  SNAKE_LENGTH: 4,\n  SNAKES_TAIL_X: 3,\n  SNAKES_TAIL_Y: 3,\n  MOVE_TIME_INTERVAL: 200,\n};\n\nexport const snakes_tail = {\n  x: 3,\n  y: 3,\n};\n\nexport const arrowKey = {\n  LEFT: 37,\n  UP: 38,\n  RIGHT: 39,\n  DOWN: 40,\n};\n","import { cst } from \"./consts\";\nconst { ROWS, COLS } = cst;\n\nexport const getRandomRowCol = () => {\n  return [Math.floor(Math.random() * ROWS), Math.floor(Math.random() * COLS)];\n};\n\nexport const getGrid = () => {\n  const grid = [];\n  for (let row = 0; row < ROWS; row++) {\n    const temp_row = [];\n    for (let col = 0; col < COLS; col++) {\n      temp_row.push(\"\");\n    }\n    grid.push(temp_row);\n  }\n  return grid;\n};\n\nexport const isSnakeHeadOnBody = (snakeCoordinates) => {\n  const snakeLength = snakeCoordinates.length;\n  const head_x = snakeCoordinates[snakeLength - 1][0];\n  const head_y = snakeCoordinates[snakeLength - 1][1];\n\n  for (let i = 0; i < snakeLength - 1; i++) {\n    if (head_x === snakeCoordinates[i][0] && head_y === snakeCoordinates[i][1])\n      return true;\n  }\n  return false;\n};\n","import React, { Component } from \"react\";\nimport \"./board.css\";\nimport Square from \"./square\";\nimport { getRandomRowCol, getGrid, isSnakeHeadOnBody } from \"./util\";\nimport { cst, snakes_tail, arrowKey } from \"./consts\";\n\nconst { ROWS, COLS, INSECT, SNAKE_LENGTH, MOVE_TIME_INTERVAL } = cst;\nconst { LEFT, UP, RIGHT, DOWN } = arrowKey;\nconst SNAKES_TAIL_X = snakes_tail.x;\nconst SNAKES_TAIL_Y = snakes_tail.y;\n\nclass Board extends Component {\n  state = {\n    grid: [],\n    insectRow: 0,\n    insectCol: 0,\n    snakeCoordinates: [],\n    prev_direction: RIGHT,\n    direction: RIGHT,\n    snake_length: SNAKE_LENGTH,\n    highScore: 0,\n    maxSpeed: false,\n  };\n\n  isInsectOnSnake(snakeCoords, row, col) {\n    /**\n     * Check if the insect's co-ordinates co-incide with that of the snake.\n     * This method is called while generating insect's co-ordinates.\n     */\n    for (let i = 0; i < snakeCoords.length; i++) {\n      if (row === snakeCoords[i][0] && col === snakeCoords[i][1]) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  changeDirection = (event) => {\n    /**\n     * Upon an arrow key press, determine if the key press is valid and\n     * accordingly set the state.\n     */\n    let prev_direction = this.state.direction;\n    let direction = null;\n\n    if (event.keyCode === UP) direction = UP;\n    else if (event.keyCode === LEFT) direction = LEFT;\n    else if (event.keyCode === DOWN) direction = DOWN;\n    else if (event.keyCode === RIGHT) direction = RIGHT;\n\n    if (\n      ((prev_direction === RIGHT || prev_direction === LEFT) &&\n        (direction === UP || direction === DOWN)) ||\n      ((prev_direction === UP || prev_direction === DOWN) &&\n        (direction === LEFT || direction === RIGHT))\n    ) {\n      this.setState({ prev_direction: prev_direction, direction: direction });\n    }\n  };\n\n  moveSnake() {\n    /**\n     * Entire logic to move the Snake.\n     */\n    const snakeCo = [...this.state.snakeCoordinates];\n    const griddy = [...this.state.grid];\n    let highScore = this.state.highScore;\n    let x, y;\n    let randomRow, randomCol;\n    let maxSpeed = this.state.maxSpeed;\n\n    // To allow the snake to move, remove the presence of the snake from\n    // old squares.\n    for (let i = 0; i < snakeCo.length; i++) {\n      griddy[snakeCo[i][0]][snakeCo[i][1]] = \"\";\n    }\n\n    // Obtain the last co-ordinates to modify and set accordingly based on the\n    // direction.\n    x = snakeCo[snakeCo.length - 1][0];\n    y = snakeCo[snakeCo.length - 1][1];\n\n    // Tail of the snake is not needed anymore, remove it.\n    const [old_coord_x, old_coord_y] = snakeCo.shift();\n\n    if (this.state.direction === RIGHT) {\n      y += 1;\n      snakeCo.push([x, y % COLS]);\n    } else if (this.state.direction === DOWN) {\n      x += 1;\n      snakeCo.push([x % ROWS, y]);\n    } else if (this.state.direction === LEFT) {\n      y -= 1;\n      y = y < 0 ? y + COLS : y;\n      snakeCo.push([x, y % COLS]);\n    } else if (this.state.direction === UP) {\n      x -= 1;\n      x = x < 0 ? x + ROWS : x;\n      snakeCo.push([x % ROWS, y]);\n    }\n\n    // Check is insect is about to be eaten\n    // If yes then generate a new insect\n    // Also, buggy code below, not sure why modulo ROWS is done,\n    // but it solves the issue, investigate later\n    if (griddy[x % ROWS][y] === INSECT) {\n      [randomRow, randomCol] = this.generateInsect(griddy, snakeCo);\n      snakeCo.unshift([old_coord_x, old_coord_y]);\n      highScore += 1;\n\n      // Speed Control logic here\n      if (highScore % 3 === 0) {\n        clearInterval(this.interval);\n        let newTimeInterval = MOVE_TIME_INTERVAL - 10 * highScore - 2;\n\n        if (newTimeInterval < 40) {\n          newTimeInterval = 40;\n          maxSpeed = true;\n        }\n\n        this.interval = setInterval(() => this.moveSnake(), newTimeInterval);\n      }\n    } else if (isSnakeHeadOnBody(snakeCo)) {\n      alert(`Game Over! Your score was: ${this.state.highScore}`);\n      clearInterval(this.interval);\n      window.location.reload();\n    }\n\n    // Update the grid with new snake co-ordinates.\n    for (let i = 0; i < snakeCo.length; i++)\n      griddy[snakeCo[i][0]][snakeCo[i][1]] = \"S\";\n\n    this.setState({\n      grid: griddy,\n      snakeCoordinates: snakeCo,\n      insectRow: randomRow,\n      insectCol: randomCol,\n      highScore: highScore,\n      maxSpeed: maxSpeed,\n    });\n  }\n\n  componentDidMount() {\n    /**\n     * After the Board component has mounted:\n     * 1. Set the grid.\n     * 2. Initialise the default snake and lay it on the grid.\n     * 3. Generate the Insect's co-ordinates.\n     * 4. Set event listener on the 'document' to move the snake on arrow key\n     *    press.\n     */\n    // Get default grid\n    const grid = getGrid();\n\n    // Set default snake on board\n    // snake tail at 3, 3\n    const snakeCoordinates = [];\n\n    for (let i = 0; i < SNAKE_LENGTH; i++) {\n      grid[SNAKES_TAIL_X][SNAKES_TAIL_Y + i] = \"S\";\n      snakeCoordinates.push([SNAKES_TAIL_X, SNAKES_TAIL_Y + i]);\n    }\n\n    const [randomRow, randomCol] = this.generateInsect(grid, snakeCoordinates);\n\n    // Finally set the state\n    this.setState({\n      grid: grid,\n      insectRow: randomRow,\n      insectCol: randomCol,\n      snakeCoordinates: snakeCoordinates,\n    });\n\n    document.addEventListener(\"keydown\", this.changeDirection, false);\n    this.interval = setInterval(() => this.moveSnake(), MOVE_TIME_INTERVAL);\n  }\n\n  componentWillUnmount() {\n    /**\n     * On Board component unmount, clear the interval and remove the event\n     * listener.\n     */\n    clearInterval(this.interval);\n    document.removeEventListener(\"keydown\", this.changeDirection, false);\n  }\n\n  generateInsect(grid, snakeCoordinates) {\n    /**\n     * Generate the Insect.\n     */\n\n    // Set the default random coordinates for the insect\n    let [randomRow, randomCol] = getRandomRowCol();\n\n    //Ensure insect is not sitting on the snake\n    while (this.isInsectOnSnake(snakeCoordinates, randomRow, randomCol)) {\n      [randomRow, randomCol] = getRandomRowCol();\n    }\n    grid[randomRow][randomCol] = INSECT;\n    return [randomRow, randomCol];\n  }\n\n  render() {\n    const { grid } = this.state;\n\n    return (\n      <div className=\"grid\">\n        {grid.map((row, rowIdx) => {\n          return (\n            <div key={rowIdx}>\n              {row.map((col, colIdx) => {\n                return (\n                  <Square\n                    key={`${rowIdx} ${colIdx}`}\n                    value={grid[rowIdx][colIdx]}\n                  ></Square>\n                );\n              })}\n            </div>\n          );\n        })}\n        <h3>{this.state.highScore}</h3>\n        {this.state.maxSpeed ? <p>You've reached maximum speed!</p> : null}\n      </div>\n    );\n  }\n}\n\nexport default Board;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Board from \"./components/board\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Board></Board>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.Fragment>\n    <App />\n  </React.Fragment>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}